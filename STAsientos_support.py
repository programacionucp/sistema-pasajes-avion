#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 21, 2020 07:50:59 PM -03  platform: Windows NT
#    Apr 21, 2020 08:05:09 PM -03  platform: Windows NT
#    Apr 21, 2020 08:16:28 PM -03  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import messagebox

def set_Tk_var():
    global dniEliminar
    dniEliminar = tk.StringVar()
    global eliminar
    eliminar = tk.StringVar()
    global nombre
    nombre = tk.StringVar()
    global dni
    dni = tk.StringVar()
    global clase
    clase = tk.StringVar()
    global ubicacion
    ubicacion = tk.StringVar()
    global dniBuscar
    dniBuscar = tk.StringVar()
    global asiento
    asiento = tk.StringVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    #Invoco mi función de configuración inicial
    configInicial()

def asignar():
    #datos ingresados
    claseSel = ""
    ubicacionSel = ""
    dniSel = dni.get()
    nombreSel = nombre.get()
    asientoSel = asiento.get()

    if clase.get() == "EJECUTIVA":
        claseSel = EJECUTIVA
    else:
        claseSel = ECONOMICO

    if ubicacion.get() == "VENTANA":
        ubicacionSel = VENTANA
    elif ubicacion.get() == "CENTRO":
        ubicacionSel = CENTRO
    else:
        ubicacionSel = PASILLO

    #recorrer la lista para asignar
    for unAsiento in lstAsientos:
        #if unAsiento[0] == int(asientoSel)  \
         if unAsiento[1] == LIBRE \
            and unAsiento[2] == claseSel  \
            and unAsiento[3] == ubicacionSel:
                print("encontró  asiento")
                unAsiento[1] = OCUPADO
                unAsiento[4] = nombreSel
                unAsiento[5] = dniSel
                unAsiento[6].configure(background=asientoBgOcupado)
                messagebox.showinfo("Registrado!", f"Asiento N° {unAsiento[0]}")
                return

def configInicial():
    global lstAsientos
    global EJECUTIVA,ECONOMICO,VENTANA,PASILLO,CENTRO,LIBRE,OCUPADO
    global asientoBgDisponible
    global asientoBgOcupado

    asientoBgDisponible,asientoBgOcupado = "#008040","#ff0080"

    EJECUTIVA,ECONOMICO = "eje","eco"
    VENTANA,PASILLO,CENTRO = "ven","pas","cen"
    LIBRE,OCUPADO = "libre","ocupado"

    """"
    0 - asiento ---> 1
    1 - estado ----> "libre","ocupado"
    2 - clase  ---->  ejecutiva - económica
    3 - ubicacion --- ventana - pasillo - centro
    4 - pasajero nombre
    5 - pasajero dni 
    6 - label 
    """
    lstAsientos = [
        [1,LIBRE,EJECUTIVA,VENTANA,"","",w.lblAsiento1],
        [2,LIBRE,EJECUTIVA,PASILLO,"","",w.lblAsiento2],
        [3,LIBRE,EJECUTIVA,PASILLO,"","",w.lblAsiento3],
        [4,LIBRE,EJECUTIVA,VENTANA,"","",w.lblAsiento4],
        [5,LIBRE,ECONOMICO,VENTANA,"","",w.lblAsiento5],
        [6,LIBRE,ECONOMICO,CENTRO,"","",w.lblAsiento6],
        [7,LIBRE,ECONOMICO,PASILLO,"","",w.lblAsiento7],
        [8,LIBRE,ECONOMICO,PASILLO,"","",w.lblAsiento8],
        [9,LIBRE,ECONOMICO,CENTRO,"","",w.lblAsiento9],
        [10,LIBRE,ECONOMICO,VENTANA,"","",w.lblAsiento10]
    ]

def buscar():
    dniSel = dniBuscar.get()
    #recorrer la lista para buscar un dni
    for unAsiento in lstAsientos:
         if unAsiento[5] == dniSel:
            messagebox.showinfo("Encontrado!", f"Pasajero {unAsiento[4]} Asiento  {unAsiento[0]} ")
            return

def eliminar():
    dniSel = dniBuscar.get()
    #recorrer la lista para buscar un dni
    for unAsiento in lstAsientos:
         if unAsiento[5] == dniSel:
            messagebox.showinfo("Eliminado!", f"Pasajero {unAsiento[4]} Asiento  {unAsiento[0]} ")
            return

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import STAsientos
    STAsientos.vp_start_gui()





