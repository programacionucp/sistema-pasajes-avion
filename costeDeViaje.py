#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Apr 14, 2020 12:23:14 PM -03  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import costeDeViaje_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    costeDeViaje_support.set_Tk_var()
    top = costeDeViaje (root)
    costeDeViaje_support.init(root, top)
    root.mainloop()

w = None
def create_costeDeViaje(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_costeDeViaje(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    costeDeViaje_support.set_Tk_var()
    top = costeDeViaje (w)
    costeDeViaje_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_costeDeViaje():
    global w
    w.destroy()
    w = None

class costeDeViaje:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("271x650+1031+149")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(relief="raised")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#f0f0f0f0f0f0")
        top.configure(highlightcolor="#646464646464")

        self.label1 = ttk.Label(top)
        self.label1.place(relx=0.037, rely=0.185, height=24, width=60)
        self.label1.configure(background="#d9d9d9")
        self.label1.configure(foreground="#000000")
        self.label1.configure(font="TkDefaultFont")
        self.label1.configure(relief="flat")
        self.label1.configure(anchor='w')
        self.label1.configure(justify='left')
        self.label1.configure(text='''Viajeros:''')

        self.Spinbox1 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Spinbox1.place(relx=0.074, rely=0.231, relheight=0.037
                , relwidth=0.871)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(highlightcolor="black")
        self.Spinbox1.configure(insertbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(selectforeground="black")
        self.Spinbox1.configure(textvariable=costeDeViaje_support.cantidadViajeros)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.037, rely=0.369, height=26, width=42)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Clase:''')

        self.style.map('TRadiobutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.radioButtonLujo = ttk.Radiobutton(top)
        self.radioButtonLujo.place(relx=0.111, rely=0.508, relwidth=0.258
                , relheight=0.0, height=26)
        self.radioButtonLujo.configure(variable=costeDeViaje_support.rButton)
        self.radioButtonLujo.configure(value="Lujo")
        self.radioButtonLujo.configure(takefocus="")
        self.radioButtonLujo.configure(text='''Lujo''')

        self.radioButton = ttk.Radiobutton(top)
        self.radioButton.place(relx=0.111, rely=0.415, relwidth=0.258
                , relheight=0.0, height=26)
        self.radioButton.configure(variable=costeDeViaje_support.rButton)
        self.radioButton.configure(value="Turista")
        self.radioButton.configure(takefocus="")
        self.radioButton.configure(text='''Turista''')

        self.radioButtonPrimera = ttk.Radiobutton(top)
        self.radioButtonPrimera.place(relx=0.111, rely=0.462, relwidth=0.295
                , relheight=0.0, height=26)
        self.radioButtonPrimera.configure(variable=costeDeViaje_support.rButton)
        self.radioButtonPrimera.configure(value="Primera")
        self.radioButtonPrimera.configure(takefocus="")
        self.radioButtonPrimera.configure(text='''Primera''')

        self.TLabel2 = ttk.Label(top)
        self.TLabel2.place(relx=0.037, rely=0.554, height=24, width=165)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Distancia (Kilometros):''')

        self.entryDistancia = ttk.Entry(top)
        self.entryDistancia.place(relx=0.074, rely=0.6, relheight=0.04
                , relwidth=0.871)
        self.entryDistancia.configure(textvariable=costeDeViaje_support.distancia)
        self.entryDistancia.configure(takefocus="")
        self.entryDistancia.configure(cursor="ibeam")

        self.TLabel3 = ttk.Label(top)
        self.TLabel3.place(relx=0.037, rely=0.662, height=24, width=55)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Precio:''')

        self.entryPrecio = ttk.Entry(top)
        self.entryPrecio.place(relx=0.074, rely=0.708, relheight=0.04
                , relwidth=0.871)
        self.entryPrecio.configure(textvariable=costeDeViaje_support.precio)
        self.entryPrecio.configure(takefocus="")
        self.entryPrecio.configure(cursor="ibeam")

        self.TLabel4 = ttk.Label(top)
        self.TLabel4.place(relx=0.037, rely=0.769, height=24, width=115)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''A Pagar (euros):''')

        self.montoPagar = ttk.Label(top)
        self.montoPagar.place(relx=0.074, rely=0.815, height=34, width=235)
        self.montoPagar.configure(background="#000000")
        self.montoPagar.configure(foreground="#ffff00")
        self.montoPagar.configure(font="TkDefaultFont")
        self.montoPagar.configure(relief="sunken")
        self.montoPagar.configure(anchor='w')
        self.montoPagar.configure(justify='right')
        self.montoPagar.configure(textvariable=costeDeViaje_support.totalPagar)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.037, rely=0.892, relwidth=0.923)

        self.buttonSalir = ttk.Button(top)
        self.buttonSalir.place(relx=0.554, rely=0.908, height=40, width=98)
        self.buttonSalir.configure(command=costeDeViaje_support.salir)
        self.buttonSalir.configure(takefocus="")
        self.buttonSalir.configure(text='''Salir''')

        self.buttonCalcular = ttk.Button(top)
        self.buttonCalcular.place(relx=0.074, rely=0.908, height=40, width=98)
        self.buttonCalcular.configure(command=costeDeViaje_support.calculoImporte)
        self.buttonCalcular.configure(takefocus="")
        self.buttonCalcular.configure(text='''Calcular''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.checkButton = ttk.Checkbutton(top)
        self.checkButton.place(relx=0.111, rely=0.323, relwidth=0.373
                , relheight=0.0, height=26)
        self.checkButton.configure(variable=costeDeViaje_support.check)
        self.checkButton.configure(takefocus="")
        self.checkButton.configure(text='''Ida y Vuelta''')

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.074, rely=0.015, relheight=0.157
                , relwidth=0.86)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

if __name__ == '__main__':
    vp_start_gui()





